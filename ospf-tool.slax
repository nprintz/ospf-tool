version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns str = 'http://exslt.org/strings';
import "../import/junos.xsl";
/*
***Use this script at your own risk.***

CURRENT VERSION 1.0

DESCRIPTION:
This is a Juniper SLAX op script to provide a quick breakdown of OSPF and OSPFv3 neighbors.

This is accomplished by combining and shortening the output of the `show ospf neighbor`, 
`show ospf interface`, and `show lldp neighbors` 
commands (along with the appropriate OSPFv3 commands as well) into one easy to read format. 

VERSION HISTORY:
* v1.0
	- Initial Release

AUTHOR: 
	Nathan Printz

EXAMPLES:
	
	No Passed argument gives a summary of the OSPF topologies:

		> op ospf-tool                  

		===================
		|       OSPF      |
		===================
		Local Router ID: 192.168.246.178
		 
		--------   Area 0.0.0.0 - Not Stub  --------
		ABRs: 0   ASBRs: 0   Neighbors Up: 2
		 
		 Interface      State        ID               rDNS hostname         Neighbor Address   
		ge-0/0/13.0    Full         10.42.0.107                            10.100.3.1          
		ge-0/0/9.0     Full         192.168.246.146                        10.100.2.1          
		lo0.0          Passive      N/A                                    N/A                 
		 
		--------   Area 0.0.0.1 - Not Stub  --------
		ABRs: 0   ASBRs: 0   Neighbors Up: 1
		 
		 Interface      State        ID               rDNS hostname         Neighbor Address   
		ge-0/0/12.0    Full         10.0.0.246       asdf.qwer.com 		   10.100.4.2          


		===================
		|      OSPFv3     |
		===================
		Local Router ID: 192.168.246.178
		 
		--------   Area 0.0.0.0 - Not Stub  --------
		ABRs: 1   ASBRs: 1   Neighbors Up: 2
		 
		 Interface      State        ID               rDNS hostname         Neighbor Address   
		ge-0/0/13.0    Full         10.42.0.107                            fe80::226:88ff:fe63:3910
		ge-0/0/15.0    No Neighbor  N/A              N/A                   
		ge-0/0/9.0     Full         192.168.246.146                        fe80::219:e2ff:fe51:83cc
		lo0.0          Passive      N/A                                    N/A                 
		 
		--------   Area 0.0.0.1 - Stub  --------
		ABRs: 0   ASBRs: 0   Neighbors Up: 1
		 
		 Interface      State        ID               rDNS hostname         Neighbor Address   
		ge-0/0/12.0    Full         10.0.0.246       hq-core-vc.jma-it.com fe80::3e8a:b0ff:fe9b:e60f

	Retrieving routes from a single neighbor ID:

		> op ospf-tool route 10.0.0.246              

		===================
		|       OSPF      |
		===================
		Prefix              Route      Path  NH    Metric Area      Next Hop      Next Hop      
		                    Type       Type  Type                   Interface     Address/LSP   
		10.0.0.246          Router     Intra IP    50     0.0.0.1   ge-0/0/12.0   10.100.4.2    
		* 10.100.5.0/24     Network    Intra IP    100    0.0.0.1   ge-0/0/12.0   10.100.4.2    

		 * denotes an active route in the routing table.


		===================
		|      OSPFv3     |
		===================
		Prefix                                  Route      Path  NH    Metric Area      Next Hop      Next Hop      
		                                        Type       Type  Type                   Interface     Address/LSP   
		10.0.0.246                              Router     Intra IP    50     0.0.0.1   ge-0/0/12.0   fe80::3e8a:b0ff:fe9b:e60f
		10.0.0.246;0.0.0.1                      Transit    Intra IP    50     0.0.0.1   ge-0/0/12.0                 
		10.0.0.246;0.0.0.2                      Transit    Intra IP    51     0.0.0.1   ge-0/0/12.0   fe80::3e8a:b0ff:fe9b:e60f
		2000::4000:0/127                        Network    Intra IP    50     0.0.0.1   ge-0/0/12.0                 
		* 2000::5000:0/127                      Network    Intra IP    51     0.0.0.1   ge-0/0/12.0   fe80::3e8a:b0ff:fe9b:e60f

		 * denotes an active route in the routing table.

	Retrieving troubleshooting information for a neighbor ID:

		> op ospf-tool id 10.0.0.246       

		===================
		|       OSPF      |
		===================
		The neighbor ID you specified was found in OSPFv3 on interface: ge-0/0/12.0
		 
		These items must match the other side for any neighborship:
		-----------------------------------------------------------
		Area ID: 0.0.0.1    Area Type: Not Stub
		Interface Type: LAN    Hello Timer: 10    Dead Timer: 40
		MTU: 1500    Subnet/mask: 10.100.4.1 / 255.255.255.0
		Authentication: Password
		 
		Your local router ID is 192.168.246.178, which must be different than the other side!


		===================
		|      OSPFv3     |
		===================
		The neighbor ID you specified was found in OSPFv3 on interface: ge-0/0/12.0
		 
		These items must match the other side for any neighborship:
		-----------------------------------------------------------
		Area ID: 0.0.0.1    Area Type: Stub
		Interface Type: LAN    Hello Timer: 10    Dead Timer: 40
		MTU: 1500    Subnet/mask: fe80::219:e2ff:fe51:85cf / 64
		 
		Your local router ID is 192.168.246.178, which must be different than the other side!

	Retrieving troubleshooting information for an interface:

		> op ospf-tool int ge-0/0/12    

		===================
		|       OSPF      |
		===================
		There is 1 OSPFv2 neighbor(s) found on interface ge-0/0/12.0
		 
		These items must match the other side for any neighborship:
		-----------------------------------------------------------
		Area ID: 0.0.0.1    Area Type: Not Stub
		Interface Type: LAN    Hello Timer: 10    Dead Timer: 40
		MTU: 1500    Subnet/mask: 10.100.4.1 / 255.255.255.0
		Authentication: Password
		 
		Your local router ID is 192.168.246.178, which must be different than the other side!


		===================
		|      OSPFv3     |
		===================
		There is 1 OSPFv3 neighbor(s) found on interface ge-0/0/12.0
		 
		These items must match the other side for any neighborship:
		-----------------------------------------------------------
		Area ID: 0.0.0.1    Area Type: Stub
		Interface Type: LAN    Hello Timer: 10    Dead Timer: 40
		MTU: 1500    Subnet/mask: fe80::219:e2ff:fe51:85cf / 64
		 
		Your local router ID is 192.168.246.178, which must be different than the other side!

*/

/* Junos CLI help text */
var $arguments = {
	<argument> {
		<name> "id";
		<description> "Neighbor ID to retrieve detailed troubleshooting info.";
	}
	<argument> {
		<name> "int";
		<description> "Interface on which to retrieve detailed troubleshooting info. Include the Unit number. (ex. ge-0/0/12.0)";
	}
	<argument> {
		<name> "route";
		<description> "Specify a Router ID to be shown all routes advertised by that router.";
	}
}

/* CLI arguments */
param $id = "";
param $int = "";
param $route = "";

match / {
	<op-script-results> {
		/************************
		Grab commands from the RE
		************************/
		/* open a connection to the RE for running multiple RPCs rapid fire, to save on compute time */
		var $conn = jcs:open();

		/* Gather the following commands: 'show ospf neighbors'
			'show ospf interfaces extensive'
			'show ospf route extensive' 
			'show ospf overview'
			and their OSPFv3 equivalents.
			and finally a 'show route' */
		var $ospf-neigh-res = jcs:execute( $conn, "get-ospf-neighbor-information" );
		
		var $ospf-overview = jcs:execute( $conn, "get-ospf-overview-information" );
		
		var $ospf-int-rpc = { <get-ospf-interface-information> { <extensive>; } }
		var $ospf-int-res = jcs:execute( $conn, $ospf-int-rpc );
		
		var $ospf3-neigh-res = jcs:execute( $conn, "get-ospf3-neighbor-information" );
		
		var $ospf3-int-rpc = { <get-ospf3-interface-information> { <extensive>; } }
		var $ospf3-int-res = jcs:execute( $conn, $ospf3-int-rpc );
		
		var $ospf3-overview = jcs:execute( $conn, "get-ospf3-overview-information" );		

		var $ospf-route-rpc = { <get-ospf-route-information> { <extensive>; } }
		var $ospf-route-res = jcs:execute( $conn, $ospf-route-rpc );

		var $ospf3-route-rpc = { <get-ospf3-route-information> { <extensive>; } }
		var $ospf3-route-res = jcs:execute( $conn, $ospf3-route-rpc );

		var $route-res = jcs:execute( $conn, "get-route-information" );

		/* Close the connection to the RE */
		expr jcs:close( $conn );

		/****************************
		This main if block determines which CLI argument they passed (if any), and runs the appropriate functions
		*****************************/
		if ( $id ) {

			/* grab the neighbor information for the specified ID or interface name. */
			var $neigh = $ospf-neigh-res//ospf-neighbor[neighbor-id==$id];
			var $neigh3 = $ospf3-neigh-res//ospf3-neighbor[neighbor-id==$id];

			var $int-name = $neigh/interface-name;
			call output_header( $version = '2');

			if ( not($neigh) ) {
				expr jcs:output( "There were no OSPFv2 neighbors found with the ID you specified: " _ $id );
			} else {
				expr jcs:output( "The neighbor ID you specified was found in OSPFv3 on interface: " _ $int-name );
			}

			/* limit the ospf interface output to the desired interface. */
			var $ospf-int = $ospf-int-res/ospf-interface[interface-name==$int-name];
			call detailed_info($ospf-int = $ospf-int, $version = '2', $overview = $ospf-overview);

			/***** run through OSPFv3 ****/

			call output_header( $version = '3');

			var $int3-name = $neigh3/interface-name;

			if ( not($neigh3) ) {
				expr jcs:output( "There were no OSPFv3 neighbors found with the ID you specified: " _ $id );
			} else {
				expr jcs:output( "The neighbor ID you specified was found in OSPFv3 on interface: " _ $int3-name );
			}

			/* limit the ospf interface output to the desired interface. */
			var $ospf3-int = $ospf3-int-res/ospf3-interface[interface-name==$int-name];
			call detailed_info($ospf-int = $ospf3-int, $version = '3', $overview = $ospf3-overview);

		} 
		/* they passed an interface, and want deep info on that interface */
		else if ( $int ){
			/**** run through the OSPFv2 information ****/
			mvar $neigh = "";
			mvar $neigh3 = "";
			mvar $int2 = "";
			/* add the a default unit number of 0 to the interface name if they didn't specify, since it must be there to match */
			if (contains($int, '.')) {
				set $int2 = $int;
				set $neigh = $ospf-neigh-res//ospf-neighbor[interface-name==$int];
				set $neigh3 = $ospf3-neigh-res//ospf-neighbor[interface-name==$int];
			} else {
				set $int2 = $int _ ".0";
				set $neigh = $ospf-neigh-res//ospf-neighbor[interface-name==$int2];
				set $neigh3 = $ospf-neigh-res//ospf-neighbor[interface-name==$int2];
			}

			call output_header( $version = '2');

			if ( not($neigh) ) {
				expr jcs:output( "There were no OSPFv2 neighbors found on the interface: " _ $int2 );
			} else {
				expr jcs:output( "There is " _ count($neigh) _ " OSPFv2 neighbor(s) found on interface " _ $int2 );
			}

			/* limit the ospf interface output to the desired interface. */
			var $ospf-int = $ospf-int-res/ospf-interface[interface-name==$int2];
			if ( $ospf-int ) {
				call detailed_info($ospf-int = $ospf-int, $version = '2', $overview = $ospf-overview);
			} else {
				expr jcs:output( "The interface you specified is not configured for OSPFv2." );
			}

			/**** run through the OSPFv3 information ****/
			call output_header( $version = '3');

			if ( not($neigh3) ) {
				expr jcs:output( "There were no OSPFv3 neighbors found on the interface: " _ $int2 );
			} else {
				expr jcs:output( "There is " _ count($neigh3) _ " OSPFv3 neighbor(s) found on interface " _ $int2 );
			}

			/* limit the ospf interface output to the desired interface. */
			var $ospf3-int = $ospf3-int-res/ospf3-interface[interface-name==$int2];

			if ( $ospf3-int ) {
				call detailed_info($ospf-int = $ospf3-int, $version = '3', $overview = $ospf3-overview);
			} else {
				expr jcs:output( "The interface you specified is not configured for OSPFv3." );
			}			
		}
		/* if the user passed the route parameter with a router ID to retrive those routes. */
		else if ( $route ) {

			/* we need to grab route information */
			var $conn2 = jcs:open();

			var $ospf-route-rpc = { <get-ospf-route-information> { <extensive>; } }
			var $ospf-route-res = jcs:execute( $conn2, $ospf-route-rpc );
			
			var $ospf3-route-rpc = { <get-ospf3-route-information> { <extensive>; } }
			var $ospf3-route-res = jcs:execute( $conn2, $ospf3-route-rpc );

			var $route-res = jcs:execute( $conn2, "get-route-information" );
			/* Close the connection to the RE */
			expr jcs:close( $conn2 );

			/* format string for printf functions */
			mvar $format = "%-20s%-11s%-6s%-6s%-7s%-10s%-14s%-14s";
			
			/* only output OSPFv2 information if there were routes learned from that neighbor in ospfv2 */
			if ( $ospf-int-res/ospf-interface ) {
				/* Output protocol header */
				call output_header( $version = '2' );
				/* test if there are routes being sent from that neighbor */
				if ( $ospf-route-res/ospf-topology-route-table/ospf-route/ospf-route-entry[route-origin==$route] ) {
					/* Header row for routes */
					expr jcs:output( jcs:printf( $format, "Prefix ", "Route ", "Path ", "NH ", "Metric ", "Area ", "Next Hop", "Next Hop "));
					expr jcs:output( jcs:printf( $format, "", "Type ", "Type ", "Type ", "", "", "Interface ", "Address/LSP "));

					/* filter the 'show ospf route extensive' output down to just the routes learned from the user-specified router ID */
					for-each ( $ospf-route-res/ospf-topology-route-table/ospf-route/ospf-route-entry[route-origin==$route] ) {
						var $next-hop = ./ospf-next-hop/next-hop-address/interface-address;
						var $next-hop-int = ./ospf-next-hop/next-hop-name/interface-name;
						var $dest = ./address-prefix;
						mvar $active = "";
						if ( $route-res/route-table[table-name=='inet.0']/rt[rt-destination==$dest]/rt-entry/nh[to==$next-hop]/../current-active ) {
							set $active = "* ";
						}
						expr jcs:output( jcs:printf( $format, $active _ $dest, ./route-type, ./route-path-type, ./next-hop-type, ./interface-cost, ./ospf-area, $next-hop-int, $next-hop ));
					}
					expr jcs:output( "\n * denotes an active route in the routing table." );
				} else {
					expr jcs:output( "The router ID you specified is not the origin for any routes in OSPFv2." );
				}
			} else {
				expr jcs:output( "\nOSPFv2 is not configured." );
			}

			/* set the new format for all the IPv6 address widths */
			set $format = "%-40s%-11s%-6s%-6s%-7s%-10s%-14s%-14s";
			if ( $ospf3-int-res/ospf3-interface ) {
				/* output the protocol header */
				call output_header( $version = '3' );
				if ( $ospf3-route-res/ospf-topology-route-table/ospf3-route/ospf3-route-entry[route-origin==$route] ) {
					expr jcs:output( jcs:printf( $format, "Prefix ", "Route ", "Path ", "NH ", "Metric ", "Area ", "Next Hop", "Next Hop "));
					expr jcs:output( jcs:printf( $format, "", "Type ", "Type ", "Type ", "", "", "Interface ", "Address/LSP "));

					/* filter the 'show ospf3 route extensive' output down to just the routes learned from the user-specified router ID */
					for-each ( $ospf3-route-res/ospf-topology-route-table/ospf3-route/ospf3-route-entry[route-origin==$route] ) {
						var $next-hop = ./ospf-next-hop/next-hop-address/interface-address;
						var $next-hop-int = ./ospf-next-hop/next-hop-name/interface-name;
						var $dest = ./address-prefix;
						mvar $active = "";
						if ( $route-res/route-table[table-name=='inet6.0']/rt[rt-destination==$dest]/rt-entry/nh[to==$next-hop]/../current-active ) {
							set $active = "* ";
						}
						expr jcs:output( jcs:printf( $format, $active _ $dest, ./route-type, ./route-path-type, ./next-hop-type, ./interface-cost, ./ospf-area, $next-hop-int, $next-hop));
					}
					expr jcs:output( "\n * denotes an active route in the routing table." );
				} else {
					expr jcs:output( "The router ID you specified is not the origin for any routes in OSPFv3." );
				}
			} else {
				expr jcs:output( "\n\nOSPFv3 is not configured." );
			}
		}
		/* no parameter was passed, so just print summary information */
		else {
			/* Loops for each area in the OSPFv2 'show ospf interface' output, if OSPFv2 is running */
			if ( $ospf-int-res/ospf-interface ) {
				/* print protocol header and router ID */
				call output_header( $version = '2');
				expr jcs:output( "Local Router ID: " _ $ospf-overview/ospf-overview/ospf-router-id );

				/* run the function to output the summary information for OSPF */
				call summary_view($int = $ospf-int-res, $neigh = $ospf-neigh-res, $overview = $ospf-overview);
			} 
			/* If ospfv3 is running, output the summary information for that protocol as well. */
			if ($ospf3-int-res/ospf3-interface) {
				/* print protocol header and router ID */
				call output_header( $version = '3');
				expr jcs:output( "Local Router ID: " _ $ospf3-overview/ospf-overview/ospf-router-id );

				/* run the function to output the summary information for OSPFv3 */
				call summary_view($int = $ospf3-int-res, $neigh = $ospf3-neigh-res, $overview = $ospf3-overview);
			}
		}
	}
}

  
/* Template: Detailed Info
	Purpose: runs through the 'show ospf interface extensive' output for the interface name and 
			protocol version that we have received, and outputs the relevant troubleshooting 
			information to the user, so they know what information needs to match on the two devices
			for the neighborship to come up.
	Params: 
		$int - node-set - The node set output from either 'show ospf interface extensive' or 'show ospf3 interface extensive'.
	    $neigh - node-set - The node set output from either 'show ospf neighbors extensive' or 'show ospf3 neighbors extensive'
		$overview - node-set - The node set of the 'show ospf overview' command (or 'show ospf3 overview')
 */
template summary_view($int, $neigh, $overview) {
	/* Format string for printf function calls */
	var $format = "%-15s%-13s%-17s%-22s%-20s%";

	/* initiate the mvar's that we need for tracking area changes, and passive interface changes */
	mvar $passive-int = "";
	mvar $area = "";

	/* determine if we are on ospf or ospf3, and drill down the interface results appropriately */
	mvar $interfaces = "";
	if ($int/ospf-interface) {
		set $interfaces = $int//ospf-interface;
	} else if ($int/ospf3-interface) {
		set $interfaces = $int//ospf3-interface;
	}

	/* loop through the each interface, grouping them by area.  */
	for-each ( $interfaces ) {
		var $cur-int = .;
		/* if we've changed from one area to the next, output the header information */
		if ( $area != ./ospf-area) {
			set $area = ./ospf-area;
			var $area-info = $overview/ospf-overview/ospf-area-overview[ospf-area==$area];

			expr jcs:output( " " );
			expr jcs:output( "--------   Area " _ $area _ " - " _ $area-info/ospf-stub-type _"  --------");
			expr jcs:output( "ABRs: " _ $area-info/ospf-abr-count _ "   ASBRs: " _ $area-info/ospf-asbr-count _ "   Neighbors Up: " _ $area-info/ospf-nbr-overview/ospf-nbr-up-count);
			expr jcs:output( " " );
			expr jcs:output( jcs:printf($format, " Interface ", " State ", " ID ", " rDNS hostname", " Neighbor Address " ));
		}

		/* grab the current interface name */
		var $int-name = ./interface-name;

		/* Grab the ospf neighbors off of that port */
		mvar $neighbors = "";
		if ($neigh/ospf-neighbor) {
			set $neighbors = $neigh//ospf-neighbor[interface-name==$int-name];
		} else if ($neigh/ospf3-neighbor) {
			set $neighbors = $neigh//ospf3-neighbor[interface-name==$int-name];
		}

		/* if there are OSPF neighbors off the interface, loop through them and output each one,
			otherwise, check if the interface is passive and output relvant information. */
		if ($neighbors) {
			for-each ($neighbors) {
				/* determine if the interface is passive or not, if it is not, grab any relevant neighbor info.*/
				if ($cur-int/passive) {
					expr jcs:output( jcs:printf($format, $int-name, $cur-int/passive, "N/A", jcs:hostname(./neighbor-id) _ " ", "N/A" ));
				} else {
					/* grab the neighbor ID and neighbor address if there is a neighbor off the current interface */
					expr jcs:output( jcs:printf($format, $int-name, ./ospf-neighbor-state, ./neighbor-id, jcs:hostname(./neighbor-id) _ " ", ./neighbor-address ));
				}
			}
		} else {
			/* determine if the interface is passive or not, and set the state information accordingly */
			if ($cur-int/passive) {
				if ($passive-int != $int-name) {
					set $passive-int = $int-name;
					expr jcs:output( jcs:printf($format, $int-name, $cur-int/passive, "N/A", "", "N/A" ));
				}
			} else {
				expr jcs:output( jcs:printf($format, $int-name, "No Neighbor", "N/A", "N/A" ));
			}
		}
	}
}


/* Template: Output Header
	Purpose: to simply output the header lines for the OSPF protocol version
	Param: 
		$version - string - the protocol version as a single number ('2' or '3') for the protocol header you want.  
*/
template output_header($version) {
	if ( $version == '2' ){
		expr jcs:output( "\n===================");
		expr jcs:output( "|       OSPF      |");
		expr jcs:output( "===================" );		
	} else if ( $version == '3' ) {
		expr jcs:output( "\n\n===================");
		expr jcs:output( "|      OSPFv3     |");
		expr jcs:output( "===================" );
	}
}


/* Template: Detailed Info
	Purpose: runs through the 'show ospf interface extensive' output for the interface name and 
			protocol version that we have received, and outputs the relevant troubleshooting 
			information to the user, so they know what information needs to match on the two devices
			for the neighborship to come up.
	Params: 
		$ospf-int - node-set - The node set of the interface that we are looking at, either the specified
							  interface from the user, or the interface that the router ID that they specified
							  was found on. The logic for this should've happened of above in main.
	    $version - string    - The string number value '2' or '3' of the protocol version of OSPF we are looking at.
	    					  This determines whether we check for authentcation or not, as well has how we gather the
	    					  subnet mask / prefix length.
		$overview - node-set - The node set of the 'show ospf overview' command (or 'show ospf3 overview')
 */
template detailed_info($ospf-int, $version, $overview) {
	expr jcs:output( " " );
	expr jcs:output( "These items must match the other side for any neighborship:" );
	expr jcs:output( "-----------------------------------------------------------" );
	expr jcs:output( "Area ID: " _ $ospf-int/ospf-area _ "    Area Type: " _ $ospf-int/ospf-stub-type);
	expr jcs:output( "Interface Type: " _ $ospf-int/interface-type _ "    Hello Timer: " _ $ospf-int/hello-interval _ "    Dead Timer: " _ $ospf-int/dead-interval );
	if ( $version == '2' ) {
		expr jcs:output( "MTU: " _ $ospf-int/mtu _ "    Subnet/mask: " _ $ospf-int/interface-address _ " / " _ $ospf-int/address-mask );
		if ( $ospf-int/authentication-type == "MD5" ) {
			expr jcs:output( "Authentication Type: " _ $ospf-int/authentication-type _ "    Key ID: " _ $ospf-int/active-key-id _ "    Key Start Time: " _ $ospf-int/active-key-start-time);
		} else {
			expr jcs:output( "Authentication: " _ $ospf-int/authentication-type );
		}
	} else if ( $version == '3' ) {
		expr jcs:output( "MTU: " _ $ospf-int/mtu _ "    Subnet/mask: " _ $ospf-int/interface-address _ " / " _ $ospf-int/prefix-length );
	}
	expr jcs:output( " " );
	expr jcs:output( "Your local router ID is " _ $overview/ospf-overview/ospf-router-id _ ", which must be different than the other side!");
}